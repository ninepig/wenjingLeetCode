//package wenjing.LeetCode;
//
//import java.util.HashMap;
//import java.util.Map;
//
///*
// * Given two strings s and t which consist of only lowercase letters.
//
//String t is generated by random shuffling string s and then add one more letter at a random position.
//
//Find the letter that was added in t.
// */
//public class LeetCode389 {
///*
// * ���������⣬testcase������input ˳���Ǵ��ҵģ�����Ϊֻ��random����ĳ��postion�����Ӧ��Ҫ�����Թ٣�����˼·Ӧ��û��
// */
//	//	 public char findTheDifference(String s, String t) {
////	     if(s==null && t==null){
////	    	 return ' ';
////	     }
////	     if(s==null && t!=null){
////	    	 return t.charAt(1);
////	     }
////
////		 int i = 0;
//////		 int j = 0;
////		 int slength = s.length();
//////		 int tlength =t.length();
////
////		 char target;
////		 for(;i<slength;i++){
////
////			 if(s.charAt(i) != t.charAt(i)){
////				 target = t.charAt(i);
////				 return target;
////			 }
////		 }
////		 return t.charAt(t.length()-1);
////	 }
//	/*
//	 * ��һ��Ӧ����2��hashmap����  ,
//	 * ������difference������ ��Ӧ����xor���������������ַ��������ְ���
//	 */
//	public char findTheDifference(String s, String t) {
//        if(s==null && t==null){
//    	 return ' ';
//     }
//     if(s==null && t!=null){
//    	 return t.charAt(1);
//     }
////     Map<Character,Integer> a = new HashMap();
////     Map<Character,Integer> b = new HashMap();
////
////     for(int i = 0 ; i<s.length()-1;i++){
////    	 if(a.containsValue(s.charAt(i)));
////    	 a.get(key)
////     }
//     	//���� s t������������ֻ��һ����ͬ�������ͬ��ֻҪȫ�������һ��ʣ�µľͿ϶��Ƕ�����Ǹ�
//     int res = (int)t.charAt(0);
//     for(int i = 0; i < s.length(); ++i){
//         res = res^(int)s.charAt(i);
//         res = res^(int)t.charAt(i+1);
//     }
//     return (char)res;
//}
//	/*
//	 * ��һ�ַǳ������ķ�������ӣ����
//	 */
//	public char findTheDifference(String s, String t) {
//        // Initialize variables to store sum of ASCII codes for
//        // each string
//        int charCodeS = 0, charCodeT = 0;
//        // Iterate through both strings and char codes
//        for (int i = 0; i < s.length(); ++i) charCodeS += (int)s.charAt(i);
//        for (int i = 0; i < t.length(); ++i) charCodeT += (int)t.charAt(i);
//        // Return the difference between 2 strings as char
//        return (char)(charCodeT - charCodeS);
//    }
//}
